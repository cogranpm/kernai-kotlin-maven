package com.parinherm.viewmodel

import com.parinherm.ApplicationData
import com.parinherm.builders.BeansViewerComparator
import com.parinherm.builders.IViewerComparator
import com.parinherm.entity.*
import com.parinherm.entity.schema.*
import com.parinherm.form.ChildFormTab
import com.parinherm.form.FormViewModel
import com.parinherm.form.IFormViewModel
import com.parinherm.view.{{#capitalize entityDef.name}}{{/capitalize}}View
import org.eclipse.core.databinding.observable.list.WritableList
import org.eclipse.jface.viewers.Viewer
import org.eclipse.swt.custom.CTabFolder

class {{#capitalize entityDef.name}}{{/capitalize}}ViewModel({{#if (hasForeignKeys this)}} {{#each (getForeignKeysByView this)}}val {{this.entityDef.name}}Id: Long {{/each}}, val selected{{#capitalize entityDef.name}}{{/capitalize}}: {{#capitalize entityDef.name}}{{/capitalize}}?, val openedFromTabId: String?, {{/hasForeignKeys}} parent: CTabFolder) : FormViewModel<{{#capitalize entityDef.name}}{{/capitalize}}>(
    {{#capitalize entityDef.name}}{{/capitalize}}View(parent, Comparator()),
    {{#capitalize entityDef.name}}{{/capitalize}}Mapper,
    { {{#capitalize entityDef.name}}{{/capitalize}}.make() }) {

    {{#each childViews}}
    private val {{#decapitalize entityDef.name}}{{/decapitalize}}s = WritableList<{{#capitalize entityDef.name}}{{/capitalize}}>()
    private val {{#decapitalize entityDef.name}}{{/decapitalize}}Comparator = {{#capitalize entityDef.name}}{{/capitalize}}ViewModel.Comparator()
    {{/each}}

    init {
{{#if hasChildren}}
        if (view.form.childFormsContainer != null)
        {
            view.form.childFormsContainer!!.childTabs.forEach {
                childFormTab: ChildFormTab -> {
        {{#each childViews}}
                    wireChildTab(childFormTab, ApplicationData.TAB_KEY_{{#toUpperCase entityDef.name}}{{/toUpperCase}}, {{#decapitalize entityDef.name}}{{/decapitalize}}sComparator, {{#decapitalize entityDef.name}}{{/decapitalize}}ingredients, ::make{{#capitalize entityDef.name}}{{/capitalize}}sViewModel)
        {{/each}}
                }
            }
        }
{{/if}}
        loadData(mapOf())
    }

{{#if hasChildren}}
{{#each childViews}}
    private fun make{{#decapitalize entityDef.name}}{{/decapitalize}}sViewModel(currentChild: {{#capitalize entityDef.name}}{{/capitalize}}?) : IFormViewModel<{{#capitalize entityDef.name}}{{/capitalize}}> {
        return {{#capitalize entityDef.name}}{{/capitalize}}ViewModel(
        currentEntity!!.id,
        currentChild,
        ApplicationData.TAB_KEY_{{#toUpperCase ../entityDef.name}}{{/toUpperCase}},
        ApplicationData.mainWindow.folder)
        }

    private fun clearAndAdd{{#capitalize entityDef.name}}{{/capitalize}}() {
        {{#decapitalize entityDef.name}}{{/decapitalize}}s.clear()
        {{#decapitalize entityDef.name}}{{/decapitalize}}s.addAll({{#capitalize entityDef.name}}{{/capitalize}}Mapper.getAll(mapOf("{{#decapitalize ../entityDef.name}}{{/decapitalize}}Id" to currentEntity!!.id)))
    }
{{/each}}

    override fun changeSelection(){
        val formBindings = super.changeSelection()
        /* specific to child list */
{{#each childViews}}
        clearAndAdd{{#capitalize entityDef.name}}{{/capitalize}}()
{{/each}}
    }

    override fun refresh() {
        super.refresh()
{{#each childViews}}
        clearAndAdd{{#capitalize entityDef.name}}{{/capitalize}}()
{{/each}}
    }

{{/if}}


    class Comparator : BeansViewerComparator(), IViewerComparator {

{{#each fieldDefinitions}}
        val {{name}}_index = {{@index}}
{{/each}}

        override fun compare(viewer: Viewer?, e1: Any?, e2: Any?): Int {
            val entity1 = e1 as {{#capitalize entityDef.name}}{{/capitalize}}
            val entity2 = e2 as {{#capitalize entityDef.name}}{{/capitalize}}
            val rc = when (propertyIndex) {
{{#each fieldDefinitions}}
                {{name}}_index -> {{#translateColumnCompare this}}{{/translateColumnCompare}}
{{/each}}
                else -> 0
            }
            return flipSortDirection(rc)
        }
    }


}