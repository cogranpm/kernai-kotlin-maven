package com.parinherm.entity.schema

import com.parinherm.entity.*
import org.jetbrains.exposed.sql.SortOrder
import org.jetbrains.exposed.sql.SqlExpressionBuilder.eq
import org.jetbrains.exposed.sql.statements.UpdateBuilder

object {{#capitalize entityDef.name}}{{/capitalize}}Mapper : IMapper<{{#capitalize entityDef.name}}{{/capitalize}}> {

    val table = {{#capitalize entityDef.name}}{{/capitalize}}s

    override fun save(item: {{#capitalize entityDef.name}}{{/capitalize}}) {
        MapperHelper.save(item, table, {{#capitalize entityDef.name}}{{/capitalize}}Mapper::mapItem)
   }

    private fun mapItem(item: {{#capitalize entityDef.name}}{{/capitalize}}, statement: UpdateBuilder<Int>) {
       {{#each fieldDefinitions}}statement[table.{{name}}] = item.{{name}}
       {{/each}}
       {{#each (getForeignKeysByView this)}}statement[table.{{this.entityDef.name}}Id] = item.{{this.entityDef.name}}Id
       {{/each}}
    }

    override fun getAll(keys: Map<String, Long>): List<{{#capitalize entityDef.name}}{{/capitalize}}> {
        return MapperHelper.getAll(keys, table, {{#each (getForeignKeysByView this)}}table.{{this.entityDef.name}}Id: Long,{{/each}}


    table.recipeId eq keys["recipeId"] as Long, table.name to SortOrder.ASC ) {
            {{#capitalize entityDef.name}}{{/capitalize}}(it[table.id].value,
                it[table.name],
                it[table.quantity],
                it[table.unit],
                it[table.recipeId]
            )
        }
    }

    {{#each (getForeignKeysByView this)}}
    fun delete(parent: {{#capitalize this.entityDef.name}}{{/capitalize}} {
        MapperHelper.delete(table, table.{{this.entityDef.name}}Id eq parent.id)
    }
    {{/each}}

    override fun delete(item: {{#capitalize entityDef.name}}{{/capitalize}}) {
        {{#each childViews}}{{#capitalize entityDef.name}}{{/capitalize}}Mapper.delete(item)
        {{/each}}
        MapperHelper.delete(table, table.id eq item.id)
    }
}