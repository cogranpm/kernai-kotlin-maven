{% set parentUrlSegement = parentViewDef.id | capitalize %}
{% set childUrlSegement = childViewDef.id | capitalize %}

const loadModal = async (url) => {
    try {
        const modal = document.getElementById("addModal");
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Response status: ${response.status}`);
        }
        const html = await response.text();
        setModalBody(html);
    } catch (error) {
        console.error(error.message);
    }

}

const setModalBody = (html: string) => {
    const modal = document.getElementById("addModal") as HTMLElement;
    if (modal) {
        const bodyElements = modal.getElementsByClassName("modal-body")
        if (bodyElements && bodyElements[0]) {
            bodyElements[0].innerHTML = html;
        }
        let modalDialog = $('#addModal') as any;
        modalDialog.show({ focus: true });
    }
}

const save = async () => {
    const form = document.getElementById('editForm') as HTMLFormElement;
    if (form) {
        let viewModel = {};
        let formData = new FormData(form);
        viewModel = Object.fromEntries(
            Array.from(formData.keys()).map(key => [
                key, formData.getAll(key).length > 1 ? formData.getAll(key) : formData.get(key)
            ])
        )
        const response = await fetch("/{{parentUrlSegement}}/{{childUrlSegement}}s/edit", {
            headers: {
                "Content-Type": "application/json",
            },
            method: "POST",
            body: JSON.stringify(viewModel)
        });
        if (response.ok) {
            if (response.status == 202) {
                const responseBody = await response.json();
                window.location.href = responseBody.locationRedirect;
            } else {
                //set the body of the modal
                const html = await response.text();
                setModalBody(html);
            }
        } else {
            console.error(response.statusText);
            setModalBody(await response.text());
        }
    }
}

const deleteEntity = async (childId: string, parentId: string) => {
    const url = `/{{parentUrlSegement}}s/${parentId}/{{childUrlSegement}}s/delete/${childId}`
    try {
        const response = await fetch(url, {
            method: "POST",
        });
        if (!response.ok) {
            throw new Error(`Response status: ${response.status}`);
        } else {
            const responseData = await response.json();
            window.location.href = responseData.locationRedirect;
        }
    } catch (error) {
        console.error(error);
        $("#alert-error").fadeIn(200).delay(2000).slideUp(200);
    }

}


export const init{{ childViewDef.id }} = () => {
    const modal = document.getElementById("addModal");

    /************************ set up the modal ****************************/
    const firstInput = document.getElementById('productId')
    modal.addEventListener('shown.bs.modal', function () {
        if (firstInput) {
            firstInput.focus()
        }
    })

    /***************** create button ****************************/
    const btnCreate = document.getElementById("btnCreate");
    btnCreate.addEventListener("click", async (event) => {
        const parentId = btnCreate.dataset.id;
        const url = `/{{parentUrlSegement}}s/${parentId}/{{childUrlSegement}}s/create`;
        await loadModal(url);
    });

    /***************** cancel button ****************************/
    const btnCancel = document.getElementById("btnCancelModal");
    btnCreate.addEventListener("click", async (event) => {
        ($('#addModal') as any).modal('toggle');
    });

    /******************** edit links ***************************/
    const editLinks = Object.values(document.getElementsByClassName("editLink"));
    editLinks.forEach(link => {
        link.addEventListener("click", async (event) => {
            const editLink = (link as HTMLAnchorElement);
            const childId = editLink.dataset.id;
            const parentId = editLink.dataset.parentId;
            const url = `/{{parentUrlSegement}}s/${parentId}/{{childUrlSegement}}s/edit/${childId}`
            await loadModal(url);
        });
    });

    /******************** delete links ***************************/
    let deleteLinks: HTMLCollectionOf<HTMLAnchorElement> = document.getElementsByClassName("deleteLink") as HTMLCollectionOf<HTMLAnchorElement>;
    for (const element of deleteLinks) {
        element.addEventListener("click", async (event: Event) => {
            if (confirm('Delete this record?')) {
                const childId = element.dataset.id;
                const parentId = element.dataset.parentId;
                await deleteEntity(childId, parentId);
            }
        });
    }

    /******************** modal save ******************************/
    const btnSave = document.getElementById("btnSave");
    btnSave.addEventListener("click", async (event) => {
        await save();
    });

};

