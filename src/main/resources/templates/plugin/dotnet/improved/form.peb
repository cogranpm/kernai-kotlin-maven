import React, { useState, useEffect, useRef } from 'react';
import {
    Button,
    Checkbox,
    Field,
    Input,
    makeStyles,
    shorthands,
    DataGridBody,
    DataGridRow,
    DataGrid,
    DataGridHeader,
    DataGridHeaderCell,
    DataGridCell,
    Dropdown,
    TableCellLayout,
    TableColumnDefinition,
    Toolbar,
    ToolbarButton,
    ToolbarDivider,
    createTableColumn,
    Card,
    CardFooter,
    CardHeader,
    CardPreview,
    Caption1,
    Body1,
    Badge,
    Text,
    Textarea,
    Select,
    SpinButton,
    useRestoreFocusTarget
} from '@fluentui/react-components';
import styles from '../Styles.module.scss';
import CountrySelector from '../CountrySelector';
import { ArrowSyncCircle24Filled, SaveEdit24Filled, Delete24Filled, FormNew24Filled } from '@fluentui/react-icons';
import FormDialog from './FormDialog';
import {loadRecord, deleteEntity, findAll, makeId } from '../server.js';

const baseUrl = "api/{{ viewDef.entityDef.name | capitalize }}";

const useStyles = makeStyles({
    root: {
        display: "flex",
        flexDirection: "column",
        ...shorthands.gap("2px"),
        width: "100%",
        maxWidth: "100%"
    },
});

const columns = [
{% for field in viewDef.fieldDefinitions %}
createTableColumn({
    columnId: "{{field.name}}",
    compare: (a, b) => {
        return a.{{field.name}}.localeCompare(b.{{field.name}});
    },
    renderHeaderCell: () => {
        return "{{field.title}}";
    },
    renderCell: (item) => {
        return (
            <TableCellLayout >
                {item.{{field.name}}}
            </TableCellLayout>
        );
    },
}){% if loop.last %}{% else %},{% endif %}
{% endfor %}
]

function Form({ jwtToken }) {
    const [list, setList] = useState([]);
    const [{{ viewDef.entityDef.name }}, set{{ viewDef.entityDef.name | capitalize }}] = useState(null);
    {% for ownerAssociation in viewDef.ownerAssociations %}
    {% if ownerAssociation.owningType == "one" %}
    const [{{ ownerAssociation.name }}Picker, set{{ ownerAssociation.name | capitalize }}Picker] = useState([]);
    {% endif %}
    {% endfor %}
    {% for assoc in viewDef.ownedAssociations %}
        {% if assoc.ownedType == "one" %}
    const [{{ assoc.ownerViewDefinition.entityName }}Picker, set{{ assoc.ownerViewDefinition.entityName | capitalize }}Picker] = useState([]);
    {% endif %}
    {% endfor %}
    const [dialogOpen, setDialogOpen] = useState(false);
    const [results, setResults] = useState("");
    const restoreFocusTargetAttribute = useRestoreFocusTarget();
    const styles = useStyles();

    const onRefresh = async (e) => {
        const response = await findAll(baseUrl, jwtToken);
        if (response.viewModel) {
            setList(response.viewModel.list);
            {% for x in viewDef.ownerAssociations %}
            {% if x.owningType == "one" %}
            set{{ x.name | capitalize }}Picker(response.viewModel.{{ x.name }}Picker);
            {% endif %}
            {% endfor %}
            {% for assoc in viewDef.ownedAssociations %}
            {% if assoc.ownedType == "one" %}
            set{{ assoc.ownerViewDefinition.entityName | capitalize }}Picker(response.viewModel.{{ assoc.ownerViewDefinition.entityName }}Picker);
            {% endif %}
            {% endfor %}
            setResults('loaded');
        } else {
            setResults(response.error);
        }
    }

    //init
    useEffect(() => {
        onRefresh(null);
    }, []);

    const onSelectionChange = (e, data) => {
        if (data.selectedItems.size === 1) {
            selectOne(data.selectedItems.values().next().value);
        }
    };

    const selectOne = async (id) => {
        const response = await loadRecord(`${baseUrl}/${id}`, jwtToken);
        if (response.model) {
            set{{ viewDef.entityDef.name | capitalize }}(response.model);
        } else {
            setResults(response.error);
        }
    };

    const deleteOne = async () => {
        if (!window.confirm('Delete, are you sure?')) {
            return;
        }
        const response = await deleteEntity(baseUrl, {{ viewDef.entityDef.name }}.id, jwtToken);
        if (response.error) {
            set{{ viewDef.entityDef.name | capitalize }}(null);
            setResults(results.filter((x) => x.id !== id));
        } else {
            setResults('{{ viewDef.entityDef.name | capitalize }} was removed');
        }
    };

    const onNew = (e) => {
        set{{ viewDef.entityDef.name | capitalize }}(makeNew(
{% set loopCount = 0 %}
{% for assoc in viewDef.ownerAssociations %}
{% if assoc.owningType == "one" %}
{% if not loop.last and loopCount > 0 %},{% endif %}
{{ assoc.name }}Picker[0].id
{% set loopCount = 1 %}
{% endif %}
{% endfor %}
{% for assoc in viewDef.ownedAssociations %}
{% if assoc.ownedType == "one" %}
{% if loopCount > 0 %},{% endif %}
{{ assoc.ownerViewDefinition.entityName }}Picker[0].id
{% set loopCount = 1 %}
{% endif %}
{% endfor %}
        ));
        setDialogOpen(true);
    };


    const makeNew = (
    {% set loopCount = 0 %}
        {% for assoc in viewDef.ownerAssociations %}
            {% if assoc.owningType == "one" %}
                {% if not loop.last and loopCount > 0%},{% endif %}
    default{{ assoc.name | capitalize }}Id
    {% set loopCount = 1 %}
            {% endif %}
        {% endfor %}
        {% for assoc in viewDef.ownedAssociations %}
            {% if assoc.ownedType == "one" %}
                {% if loopCount > 0 %},{% endif %}
    default{{ assoc.ownerViewDefinition.entityName  | capitalize}}Id
    {% set loopCount = 1 %}
            {% endif %}
        {% endfor %}
    ) => {
        return {
            id: makeId(),
            {% for field in viewDef.fieldDefinitions %}
    {{field.name}}: {{ field.defaultJavascript }},
            {% endfor %}
        {% for assoc in viewDef.ownerAssociations %}
            {% if assoc.owningType == "one" %}
            {{ assoc.name}}Id: default{{ assoc.name | capitalize }}Id ? default{{ assoc.name | capitalize }}Id : "",
            {% else %}
            {{ assoc.name }}: [],
            {% endif %}
        {% endfor %}
        {% for assoc in viewDef.ownedAssociations %}
            {% if assoc.ownedType == "one" %}
            {{ assoc.ownerViewDefinition.entityName }}Id: default{{ assoc.ownerViewDefinition.entityName | capitalize }}Id ? default{{ assoc.ownerViewDefinition.entityName  | capitalize}}Id : "",
            {% endif %}
        {% endfor %}
            isNew: true,
            isDeleted: false
        };
    };

    const onEdit = (e) => {
        setDialogOpen(true);
    };

    return (
        <div className={styles.root}>
            <Card>
                <CardHeader
                    header={
                        <div>
                            <Toolbar>
                                <ToolbarButton
                                   {...restoreFocusTargetAttribute}
                                    aria-label="New"
                                    icon={<FormNew24Filled />}
                                    appearance="primary"
                                    onClick={onNew}>
                                </ToolbarButton>
                                <ToolbarButton
                                    {...restoreFocusTargetAttribute}
                                    aria-label="Edit"
                                    icon={<SaveEdit24Filled/>}
                                    disabled={ {{ viewDef.entityDef.name }} === null}
                                    appearance="primary"
                                    onClick={onEdit}>
                                </ToolbarButton>
                                <ToolbarButton
                                    aria-label="Refresh"
                                    icon={<ArrowSyncCircle24Filled />}
                                    appearance="primary"
                                    onClick={onRefresh}
                                ></ToolbarButton>
                                <ToolbarButton
                                    aria-label="Delete"
                                    icon={<Delete24Filled />}
                                    appearance="primary"
                                    onClick={deleteOne}
                                    disabled={ {{ viewDef.entityDef.name }} === null }
                                >
                                </ToolbarButton>
                            </Toolbar>

                        <Body1>
                            <Text>{{ viewDef.title }}s</Text>
                        </Body1>
                        </div>
                    }
                />
                <CardPreview>
                    <DataGrid
                        items={list}
                        columns={columns}
                        sortable
                        selectionMode="single"
                        onSelectionChange={onSelectionChange}
                        getRowId={(item) => item.id}
                    >
                        <DataGridHeader>
                            <DataGridRow>
                                {({ renderHeaderCell }) => (
                                    <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>
                                )}
                            </DataGridRow>
                        </DataGridHeader>
                        <DataGridBody>
                            {({ item, rowId }) => (
                                <DataGridRow
                                    key={rowId}
                                    selectionCell={ { radioIndicator: { "aria-label": "Select row" } } }
                                >
                                    {({ renderCell }) => (
                                        <DataGridCell>{renderCell(item)}</DataGridCell>
                                    )}
                                </DataGridRow>
                            )}
                        </DataGridBody>
                    </DataGrid>
                </CardPreview>
                <CardFooter>
                    <Body1>
                      <Text align="justify">Results: {results}</Text>
                    </Body1>
                </CardFooter>
            </Card>
            <div>
                <FormDialog
                    open={dialogOpen}
                    setOpen={setDialogOpen}
                    {{ viewDef.entityDef.name }} = { {{ viewDef.entityDef.name }} }
                    set{{ viewDef.entityDef.name | capitalize }} = { set{{ viewDef.entityDef.name | capitalize }} }
                    setResults={setResults}
                    list={list}
                    setList={setList}
                    jwtToken={jwtToken}
{% for ownerAssociation in viewDef.ownerAssociations %}
{% if ownerAssociation.owningType == "one" %}
{{ ownerAssociation.name }}Picker = { {{ ownerAssociation.name }}Picker }
{% endif %}
{% endfor %}
{% for assoc in viewDef.ownedAssociations %}
{% if assoc.ownedType == "one" %}
{{ assoc.ownerViewDefinition.entityName }}Picker = { {{ assoc.ownerViewDefinition.entityName }}Picker }
{% endif %}
{% endfor %}
                />
            </div>
        </div>
    );
}

export default Form;
