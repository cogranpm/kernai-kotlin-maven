import { toQueryString } from "../utils/url-utils.js";
import { addOrRemoveClass, createJqSelectorBuilder as jqs } from "../utils/jquery-utils.js";

export interface {{viewDef.entityDef.name | capitalize}}ForList {
    numRows: number;
    id: number;
{% for field in viewDef.fieldDefinitions %}
    {{ field.nameAsField}}: {{ field.dataTypeDef.dataTypeToTypeScriptDef }};
{% endfor %}
{% for childViewDef in viewDef.childViews %}
    {{ childViewDef.id | decapitalizeFilter }}sCount: number;
{% endfor %}
}

export interface SearchCriteria {
    search: string;
}

export interface {{viewDef.entityDef.name | capitalize}}ListModel {
    criteria: SearchCriteria,
    loadingHtml: string;
    loadingSmHtml: string;
}

export enum ElementIds {
    LIST_TABLE = "listTable"
}

let model: {{viewDef.entityDef.name | capitalize}}ListModel;

export function initialize(m: {{viewDef.entityDef.name | capitalize}}ListModel) {
    model = m;
}

function getJqListTable(): JQuery<HTMLTableElement> {
    return $<HTMLTableElement>(`#${ElementIds.LIST_TABLE}`);
}

$(function () {
    let dataTable = getJqListTable().DataTable({
        processing: true,
        serverSide: false,
        info: false,
        paging: true,
        scrollX: true,
        scrollY: "400px",
        pageLength: 25,
        order: [[1, 'asc']],
        ajax: {
            url: '/{{viewDef.id | capitalize}}s/list',
            data: function(d) {
                return $.extend({}, d, model.criteria);
            }
        },
        columns: [
            {
                data: function (data: {{viewDef.entityDef.name | capitalize}}ForList) {
                    return `<a href="javascript:;" class="deleteLink" data-id="${data.id}"><i class="fa fa-trash"></i></a>`;
                }
            }
{% for field in viewDef.showInListSortedFields%}
{% if loop.first %}
            {
                data: function (data: {{viewDef.id | capitalize}}ForList) {
                    return `<a href="javascript:; "class="editLink" data-id="${data.id}" id="editLink" data-bs-toggle="modal" data-bs-target="#addModal">${data.{{ field.name | decapitalizeFilter }} }</button>`;
                }
            },
{% else %}
{% if (field.dataTypeDef == "DATETIME" or field.dataTypeDef == "DATE" or field.dataTypeDef == "TIME") %}
            { data: '{{ field.nameAsField}}String' },
{% elseif field.lookupKey is not empty %}
            { data: '{{ field.nameAsField}}String' },
{% else %}
            { data: '{{ field.nameAsField}}' },
{% endif %}
{% endif %}
{% endfor %}
{% for childViewDef in viewDef.childViews %}
            {
                data: function (data: {{viewDef.id | capitalize}}ForList) {
                    return `<a href="/{{viewDef.id | capitalize}}s/${data.id}/{{ childViewDef.id | decapitalizeFilter }}s">${data.{{ childViewDef.id | decapitalizeFilter }}sCount}</a>`;
                }
            },
{% endfor %}

        ],
        columnDefs: [
            { targets: 'no-sort', orderable: false },
            { targets: 'date', type: 'date' }
        ],
        language: {
            infoFiltered: '',
            processing: model.loadingSmHtml,
            searchPlaceholder: 'Filter Results',
            search: ''
        },
        lengthChange: false,
        stateSave: false,
        stateDuration: -1,
        searching: true,
        initComplete: function (settings, json: any) {

            let editLinks: HTMLCollectionOf<HTMLAnchorElement> = document.getElementsByClassName("editLink") as HTMLCollectionOf<HTMLAnchorElement>;
            for (const element of editLinks) {
                element.addEventListener("click", async (event: Event) => {
                    const id = (event.currentTarget as HTMLButtonElement).dataset.id;
                    load(id);
                });
            }

            let deleteLinks: HTMLCollectionOf<HTMLAnchorElement> = document.getElementsByClassName("deleteLink") as HTMLCollectionOf<HTMLAnchorElement>;
            for (const element of deleteLinks) {
                element.addEventListener("click", async (event: Event) => {
                    if (confirm('Delete this record?')) {
                        const id = (event.currentTarget as HTMLAnchorElement).dataset.id;
                        const url = `/{{viewDef.entityDef.name | capitalize}}s/delete/${id}`;
                        try {
                            const response = await fetch(url);
                            if (!response.ok) {
                                throw new Error(`Response status: ${response.status}`);
                            } else {
                                window.location.href = "/{{viewDef.entityDef.name | capitalize}}s";
                            }
                        } catch (error) {
                            console.error(error);
                            $("#alert-error").fadeIn(200).delay(2000).slideUp(200);
                        }
                    }
                });
            }
        }
    });

    getJqListTable().wrap('<div class="table-responsive with-data-table"></div>');

/*
    jqs().id(ElementIds.LIST_TABLE).tbody().toJq().on('click', 'tr', function () {
        let row = dataTable.row(this);
        let data = row.data() as any;
        let id = data.id;
		load(id);
	});
*/

    dataTable.on('draw', function () {
        if (currentId != '') {
            highlight(currentId);
        }
    });

    $(window).resize(function () {
		listViewBack(false);
	});

    $(window).on('popstate', function (event) {
        let hashedId = $(location).attr('hash').replace('#', '');
        if (!isLoading && hashedId != '' && hashedId != currentId) {
            //load(hashedId);
        }
    });

     $('#btnSaveShared').on('click', function (e) {
        e.preventDefault();
        save();
    });

    const btnCreate: HTMLButtonElement = document.getElementById("btnCreate") as HTMLButtonElement;
    btnCreate.addEventListener("click", async (event: Event) => {
        create();
    });

});

let currentId = '';

function highlight(id: string) {
    currentId = id;
    jqs().id(ElementIds.LIST_TABLE).tbody().tr().toJq().removeClass('alert-info');
    jqs().tr().contains(id as string).toJq().addClass('alert-info');
    $(location).attr('hash', id);
}

function getInfoElement() {
    return jqs().id("info").toJq();
}

let isLoading = false;


{# THIS IS A COMMENT
const modalConfig = (loading: boolean = false) => {
{% for field in viewDef.fieldDefinitions %}
{% if field.lookupKey is not empty and field.configMap["advancedLookup"] == "true" %}
    let {{ field.nameAsField }}Combo = $('#{{ field.nameAsField }}');
    const current{{ field.name | capitalize }} = {{ field.nameAsField }}Combo.data("{{ field.nameAsField }}");

    {{ field.nameAsField }}Combo.select2({
        placeholder: 'Choose {{ field.title }}',
        allowClear: false,
        dropdownParent: $('#addModal'),
        ajax: {
            type: 'GET',
            url: `/{{viewDef.entityDef.name | capitalize}}s/{{ field.lookupKeyAsField }}s`,
            dataType: 'json'
        },
    });
    if (current{{ field.name | capitalize }}) {
        {{ field.nameAsField }}Combo.val(current{{ field.name | capitalize }}).trigger('change');
    }
{% endif %}
{% endfor %}
}
#}
export function save(){
    const validator = $('#editForm').validate();
    if (!validator.form()) {
        return;
    }

    const el: HTMLFormElement = document.getElementById('editForm') as HTMLFormElement;
    if (el) {
       let viewModel = {};

        let formData = new FormData(el);
        viewModel = Object.fromEntries(
            Array.from(formData.keys()).map(key => [
                key, formData.getAll(key).length > 1 ? formData.getAll(key) : formData.get(key)
            ])
        )

        getInfoElement().load(
            `/{{viewDef.entityDef.name | capitalize}}s/edit`, viewModel,
            function (response, status, xhr) {
                if (status == 'error') {
                    getInfoElement().html('<div class="alert alert-warning">Could not load record</div>');
                    isLoading = false;
                }
                else {
                    if (xhr.status == 202) {
                        var jsonData = JSON.parse(response);
                        window.location.href = jsonData.locationRedirect;
                    }
                }
            }
        );
    }
}

export function load(id: string) {
    isLoading = true;
	listViewBack(false);
    highlight(id);
    listViewBack(true);
    getInfoElement().html(model.loadingHtml);
    $(function () {
        const qs = toQueryString({});
        getInfoElement().load(
            `/{{viewDef.entityDef.name | capitalize}}s/info/${id}` + "?" + qs,
            function (response, status, xhr) {
                if (status == 'error') {
                    getInfoElement().html('<div class="alert alert-warning">Could not load record</div>');
                    isLoading = false;
                }
                else {
                    let modal = $('#addModal') as any;
                    modal.modal({ focus: true });
                    isLoading = false;
                }
            }
        );
    });
}

export function create() {
    isLoading = true;
    getInfoElement().html(model.loadingHtml);
    $(function () {
        const qs = toQueryString({});
        getInfoElement().load(
            `/{{viewDef.entityDef.name | capitalize}}s/create` + "?" + qs,
            function (response, status, xhr) {
                if (status == 'error') {
                    getInfoElement().html('<div class="alert alert-warning">Could not load record</div>');
                    isLoading = false;
                }
                else {
                    let modal = $('#addModal') as any;
                    modal.modal({ focus: true });
                    isLoading = false;
                }
            }
        );
    });
}

export function listViewBack(show: boolean) {
    if (window.matchMedia("(max-width: 991.98px)").matches) {
        addOrRemoveClass(show, '.list-viewer', 'list-content-show');
        addOrRemoveClass(show, '#mainMenuOpen', 'd-none');
        addOrRemoveClass(!show, '#listViewBack', 'd-none');
    }
}


