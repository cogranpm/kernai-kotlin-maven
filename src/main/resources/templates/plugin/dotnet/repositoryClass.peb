using Microsoft.EntityFrameworkCore;
using Portal.Repository.Domain;
using Portal.Repository.Model.ConklinCentral;
using System;
using System.Linq;
using Portal.Core;
using System.Collections.Generic;

{% set hasLookups = 0 %}
{% for field in viewDef.fieldDefinitions %}
{% if field.lookupKey is not empty %}
{% set hasLookups = 1 %}
{% endif %}
{% endfor %}
namespace Portal.Repository
{
    public interface I{{viewDef.entityDef.name | capitalize}}Repository : IRepository<{{viewDef.entityDef.name | capitalize}}, int>
    {
        IList<{{viewDef.entityDef.name | capitalize}}ForList> GetForList(
{% for field in viewDef.searchFields%}
            {{ field.dataTypeDef.dataTypeToCSharpDef }}{{ field.cSharpNullablePostfix }} {{ field.nameAsField }},
{% endfor %}
            DataSortParameters dataSort);

        {{viewDef.entityDef.name | capitalize}} Add({{viewDef.entityDef.name | capitalize}} entity);
		void Update({{viewDef.entityDef.name | capitalize}} entity);
		void Delete(int id);
    }

    public class {{viewDef.entityDef.name | capitalize}}Repository : BaseRepository<{{viewDef.entityDef.name | capitalize}}, int>, I{{viewDef.entityDef.name | capitalize}}Repository
    {
        protected sealed override DbSet<{{viewDef.entityDef.name | capitalize}}> Entities { get; set; }
		private {{viewDef.entityDef.name | capitalize}}ServiceBase _serviceBase;

{% for field in viewDef.fieldDefinitions %}
{% if field.lookupKey is not empty %}
    	private I{{ field.lookupKey | capitalize}}Repository _{{ field.lookupKeyAsField }}Repository;
{% endif %}
{% endfor %}


        public {{viewDef.entityDef.name | capitalize}}Repository(
            ConklinCentralDataEntities context
{% for field in viewDef.fieldDefinitions %}
{% if field.lookupKey is not empty %}
    	    , I{{ field.lookupKey | capitalize}}Repository {{ field.lookupKeyAsField }}Repository
{% endif %}
{% endfor %}
        )
        {
            Entities = context.{{viewDef.entityDef.name | capitalize}}s;
            this._serviceBase = new ProductEarningTypeLookupServiceBase(context);
 {% for field in viewDef.fieldDefinitions %}
{% if field.lookupKey is not empty %}
    	    this._{{ field.lookupKeyAsField }}Repository = {{ field.lookupKeyAsField }}Repository;
{% endif %}
{% endfor %}
        }

        public IList<{{viewDef.entityDef.name | capitalize}}ForList> GetForList(
{% for field in viewDef.searchFields %}
            {{ field.dataTypeDef.dataTypeToCSharpDef }}{{ field.cSharpNullablePostfix }} {{ field.nameAsField }},
{% endfor %}
            DataSortParameters dataSort)
        {
            var results = this.GetPagedListWhere(x =>
{% for field in viewDef.searchFields %}    ({{ field.nameAsField }} == null || x.{{ field.nameAsField | capitalize}}.Equals({{ field.nameAsField }})){% if loop.last %},{% else %} && {% endif %}{% endfor %}

                    dataSort.Start,
                    dataSort.Length)
            .Select(x => new {{viewDef.entityDef.name | capitalize}}ForList ()
            {
{% for field in viewDef.fieldDefinitions %}
                {{ field.name | capitalize}} = x.{{ field.name | capitalize}},
{% endfor %}
                Id = x.Id,
                NumRows = Count()
            }).ToList();

{% if hasLookups == 1 %}
            results.ForEach(i =>
            {
{% for field in viewDef.fieldDefinitions %}
{% if field.lookupKey is not empty %}
                i.{{ field.name | capitalize }}String = this._{{ field.lookupKeyAsField }}Repository.GetDescriptionById(i.{{ field.name | capitalize }});
{% endif %}
{% endfor %}
            });
{% endif %}
            return results;
        }


 	public {{viewDef.entityDef.name | capitalize}} Add({{viewDef.entityDef.name | capitalize}} entity)
		{
			this._serviceBase.Add(entity);
			this._serviceBase.SaveChanges();
			return entity;
		}

		public void Update({{viewDef.entityDef.name | capitalize}} entity)
		{
			var existing = this.Entities.AsNoTracking().FirstOrDefault(x => x.Id == entity.Id);
			if (existing != null)
			{
				//viewmodel does not have existing audit info
				entity.CreatedBy = existing.CreatedBy;
				entity.CreatedOn = existing.CreatedOn;
				this._serviceBase.Update(entity);
				this._serviceBase.SaveChanges();
			}
		}
		public void Delete(int id)
		{
			this._serviceBase.Delete(id);
			this._serviceBase.SaveChanges();
		}

		class {{viewDef.entityDef.name | capitalize}}ServiceBase : ServiceBase<{{viewDef.entityDef.name | capitalize}}, ConklinCentralDataEntities>
		{
			public {{viewDef.entityDef.name | capitalize}}ServiceBase(ConklinCentralDataEntities repo) : base(repo)
			{
			}
		}
    }
}
