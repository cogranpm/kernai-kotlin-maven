using Microsoft.EntityFrameworkCore;
using Portal.Repository.Domain;
using Portal.Repository.Model.ConklinCentral;

namespace Portal.Repository
{
    public interface I{{viewDef.entityDef.name | capitalize}}Repository : IRepository<{{viewDef.entityDef.name | capitalize}}, int>
    {
IQueryable<{{viewDef.entityDef.name | capitalize}}ForList> GetForList(
{% for field in viewDef.searchFields%}
{{ field.dataTypeDef.dataTypeToCSharpDef }}? {{ field.nameAsField }},
{% endfor %}
DataSortParameters dataSort);
    }

    public class {{viewDef.entityDef.name | capitalize}}Repository : BaseRepository<{{viewDef.entityDef.name | capitalize}}, int>, I{{viewDef.entityDef.name | capitalize}}Repository
    {
        protected sealed override DbSet<{{viewDef.entityDef.name | capitalize}}> Entities { get; set; }

        public {{viewDef.entityDef.name | capitalize}}Repository(ConklinCentralDataEntities context)
        {
            Entities = context.{{viewDef.entityDef.name | capitalize}}s;
        }

        public IQueryable<{{viewDef.entityDef.name | capitalize}}ForList> GetForList(
{% for field in viewDef.searchFields %}
{{ field.dataTypeDef.dataTypeToCSharpDef }}? {{ field.nameAsField }},
{% endfor %}
DataSortParameters dataSort)
        {
            var result = this.GetPagedListWhere(
                    x =>
{% for field in viewDef.searchFields %}
({{ field.nameAsField }} == null || x.{{ field.nameAsField | capitalize}}.Equals({{ field.nameAsField }})){% if loop.last %},{% else %} && {% endif %}

{% endfor %}
                    dataSort.Start,
                    dataSort.Length)
            .Select(x => new {{viewDef.entityDef.name | capitalize}}ForList ()
            {
{% for field in viewDef.fieldDefinitions %}
{{ field.name | capitalize}} = x.{{ field.name | capitalize}},
{% endfor %}
                Id = x.Id,
                NumRows = 0
            }).AsQueryable<{{viewDef.entityDef.name | capitalize}}ForList>();
            return result;
        }
    }
}
