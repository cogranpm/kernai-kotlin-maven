using System;
using System.Linq;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Portal.Core;
using Portal.Service;
using Portal.Web.Models;
using Portal.Repository.Model.ConklinCentral;
using Portal.Repository;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace Portal.Web.Controllers
{

    [Route("{{viewDef.entityDef.name | capitalize}}s")]
    public class {{viewDef.entityDef.name | capitalize}}sController : Controller
    {
        public const string Heading = "{{viewDef.title}}s";
        private readonly I{{viewDef.entityDef.name | capitalize}}Service _service;
{% for field in viewDef.fieldDefinitions %}
{% if field.lookupKey is not empty %}
        private readonly I{{ field.lookupKey }}Repository _{{ field.lookupKeyAsField }}Repository;
{% endif %}
{% endfor %}


        public {{viewDef.entityDef.name | capitalize}}sController(
        I{{viewDef.entityDef.name | capitalize}}Service service
{% for field in viewDef.fieldDefinitions %}
{% if field.lookupKey is not empty %}
        , I{{ field.lookupKey }}Repository {{ field.lookupKeyAsField }}Repository
{% endif %}
{% endfor %}

        ){
            this._service = service;
{% for field in viewDef.fieldDefinitions %}
{% if field.lookupKey is not empty %}
            this._{{ field.lookupKeyAsField }}Repository = {{ field.lookupKeyAsField }}Repository;
{% endif %}{% endfor %}
        }

        public ViewResult Index(
{% for field in viewDef.searchFields %}
            {{ field.dataTypeDef.dataTypeToCSharpDef }}{{ field.cSharpNullablePostfix }} {{ field.nameAsField }} = null,
{% endfor %}
           string search = null)
        {
            return View("Index", new ProductEarningTypeLookupSearch()
            {
                Title = Heading,
                Criteria = new ProductEarningTypeLookupSearchCriteria()
                {
{% for field in viewDef.searchFields %}
                {{ field.name | capitalize }} = {{ field.nameAsField }} {% if loop.last %}{% else %},{% endif %}

{% endfor %}
                }
            });
        }

        [HttpGet]
        [Route("info/{id}")]
        public ViewResult Info(int? id, [FromQuery]{{viewDef.entityDef.name | capitalize}}SearchCriteria criteria)
        {
            var entityInfo = new  {{viewDef.entityDef.name | capitalize}}Info();
            var entity = this._service.GetFirstWhere(x => x.Id == id);
            return View("_info", this.MakeEntityViewModel(criteria, null, entity));
        }

        [HttpGet]
        [Route("list")]
        public JsonResult ListJson(int draw,
            int start,
            int length,
            [Bind(Prefix = "order[0][column]")] int orderCol,
            [Bind(Prefix = "order[0][dir]")] string orderDir,
            {% for field in viewDef.searchFields %}
        {{ field.dataTypeDef.dataTypeToCSharpDef }}{{ field.cSharpNullablePostfix }} {{ field.nameAsField }} = null{% if loop.last %}{% else %},{% endif %}

{% endfor %}
           )
        {
            var dataSort = new DataSortParameters { Length = length, OrderDir = orderDir, OrderCol = orderCol, Start = start };
            var records = this._service.GetForList(
{% for field in viewDef.searchFields %}
            {{ field.nameAsField }},
{% endfor %}
            dataSort)
            .ToList();

            var result = new ProductEarningTypeLookupListJson
            {
                Draw = draw,
                RecordsTotal = records.Count,
                RecordsFiltered = records.Count(),
                Data = records
            };
            return Json(result);
        }

        [HttpPost]
        [Route("edit")]
        public ActionResult Edit([Bind()] {{viewDef.entityDef.name | capitalize}}Info entity)
        {
			var mapper = new EntityMapper();
			if (ModelState.IsValid)
			{
				Response.StatusCode = StatusCodes.Status202Accepted;
				var domainInstance = mapper.ToDomain(entity);
				if (entity.Id < 1)
				{
					mapper.SetAudit(domainInstance, "system", true);
					var updatedDomain = this._service.Add(domainInstance);
                    var updatedInfo = this.MakeEntityViewModel(null, null, updatedDomain);
					return View("_info", updatedInfo);
				}
				else
				{
					mapper.SetAudit(domainInstance, "system", false);
					this._service.Update(domainInstance);
                    return View("_info", this.MakeEntityViewModel(null, entity, null));
				}
			}
			return View("_info", this.MakeEntityViewModel(null, entity, null));
        }


        [HttpGet]
        [Route("create")]
        public ViewResult Create([FromQuery] {{viewDef.entityDef.name | capitalize}}SearchCriteria criteria)
        {
            return View("_info", this.MakeEntityViewModel(criteria));
        }

        [Route("delete/{id}")]
        public int? Delete(int? id)
        {
			if (id != null)
			{
				this._service.Delete(id.Value);
			}
			return id;
        }

{% for field in viewDef.fieldDefinitions %}
{% if field.lookupKey is not empty and field.configMap["advancedLookup"] == "true" %}
		[HttpGet]
		[Route("{{ field.lookupKeyAsField }}s")]
		public JsonResult Get{{ field.lookupKey | capitalize }}s(string term, string q, string _type, int? page)
		{
			Console.WriteLine($"term: {term} q: {q} page: {page}");
			return Json(this._{{ field.lookupKeyAsField }}Repository.GetAllForListLookup(term, page));
		}
{% endif %}
{% endfor %}

        private {{viewDef.entityDef.name | capitalize}}Info MakeEntityViewModel(
            {{viewDef.entityDef.name | capitalize}}SearchCriteria criteria,
            {{viewDef.entityDef.name | capitalize}}Info existing = null,
            {{viewDef.entityDef.name | capitalize}} domain = null)
        {
            var entity = new {{viewDef.entityDef.name | capitalize}}Info();
            if (domain != null)
            {
                entity = new EntityMapper().ToViewModel(domain);
            }
            else if(existing != null)
            {
                entity = existing;
            }

{% for field in viewDef.fieldDefinitions %}
{% if field.lookupKey is not empty and field.configMap["advancedLookup"] != "true" %}
            entity.{{ field.lookupKey }}s = this._{{ field.lookupKeyAsField }}Repository.GetAllForListLookup()
            .Select(x => new SelectListItem(x.Title, x.Id.ToString(), x.Id == entity.{{ field.name | capitalize}}))
            .OrderBy(e => e.Value)
            .ToList();
{% elseif field.lookupKey is not empty and field.configMap["advancedLookup"] == "true" %}
			entity.{{ field.name | capitalize}}String = this._{{ field.lookupKeyAsField }}Repository.GetDescriptionById(entity.{{ field.name | capitalize}});
{% endif %}
{% endfor %}

            entity.Criteria = criteria;
            return entity;
        }

		class EntityMapper
		{
			public EntityMapper() { }
			public {{viewDef.entityDef.name | capitalize}}Info ToViewModel({{viewDef.entityDef.name | capitalize}} entity)
			{
				return new {{viewDef.entityDef.name | capitalize}}Info()
				{
{% for field in viewDef.fieldDefinitions %}
                    {{ field.name | capitalize}} = entity.{{ field.name | capitalize}},
{% endfor %}
				    Id = entity.Id
				};
			}

			public {{viewDef.entityDef.name | capitalize}} ToDomain({{viewDef.entityDef.name | capitalize}}Info info)
			{
				return new {{viewDef.entityDef.name | capitalize}}()
				{
{% for field in viewDef.fieldDefinitions %}
                    {{ field.name | capitalize}} = info.{{ field.name | capitalize}},
{% endfor %}
				    Id = info.Id
				};
			}

			public void SetAudit({{viewDef.entityDef.name | capitalize}} entity, string user, bool creating = false)
			{
				if (creating)
				{
					entity.CreatedBy = user;
					entity.CreatedOn = DateTime.Now;
				}
				entity.ModifiedBy = user;
				entity.ModifiedOn = DateTime.Now;
			}
		}

    }
}